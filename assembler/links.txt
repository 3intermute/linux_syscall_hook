https://developer.arm.com/documentation/ddi0596/2021-12/Base-Instructions/MOV--bitmask-immediate---Move--bitmask-immediate---an-alias-of-ORR--immediate--?lang=en

http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=mov+w0%2C+0x5678%0D%0Amovk+w0%2C+0x1234%2C+lsl+16+&arch=arm64&as_format=inline#assembly


11110010100000000000000000000000
00000|0000000000000000|00|101001111

f2800520
movk 0, 0x29
"\x20\x05\x80\xf2"

111100101|0000|00000000101001|00000

movk x29, 0x29
"\x3d\x05\x80\xf2"

f280053d

111100101|0000|00000000101001|11101

111100101|0000|00000000000000|11101


//
// uint32_t assemble_movk(uint32_t imm16, uint32_t hw, uint32_t rd) {
//     return 0xf2800000 | (imm16 << 5) | (hw << 21) | rd;
// }
//
// uint32_t assemble_movz(uint32_t imm16, uint32_t hw, uint32_t rd) {
//     return 0xa5000000 | (imm16 << 5) | (hw << 21) | rd;
// }
//
// // https://stackoverflow.com/questions/53268118/whats-the-difference-between-mov-movz-movn-and-movk-in-armv8-assembly
// uint32_t assemble_movn() {
//
// }
//
// unsigned char *assemble_absolute_load(uint32_t rd, uintptr_t addr) {
//     unsigned char *code = vmalloc(ASM_ABS_LOAD_SIZE); // 3 insts needed, insts 4 bytes
//     // code[0] = assemble_movz(addr & 0xffffffff, 0b1, rd);
//     // use movn or movz depending on size
//     code[4] = assemble_movk(addr & 0xffff00000000, 0b10, rd);
//     code[8] = assemble_movk(addr & 0xffff000000000000, 0b11, rd);
//     return code;
// }


9df9b3d2

movz x29, #0x9fcc, lsl #16

0xffffd8589fcc0000

10100101000000000000000000000000

movk x0, #0x0000
movk x0, #0x9fcc, lsl #16
movk x0, #0xd858, lsl #32
movk x0, #0xffff, lsl #48

000080f2

1D 00 80 F2

0000a0fb
111110111|01000000000000000000000

9D F9 B3 F2
111100101|011001111111001100|11101

0000c0f2
0000e0f2


#define ABS_LOAD_INS_COUNT 4

// https://developer.arm.com/documentation/ddi0596/2021-12/Base-Instructions/MOVK--Move-wide-with-keep-?lang=en
// movk encoding:
// 0 | 1 1 1 0 0 1 0 1 | 0 0 | 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 | 0 0 0 0 0
//------------------------------------------------------------------------
// sf|opc              |hw   |imm16                            |rd
uint32_t assemble_movk(uint32_t imm16, uint32_t hw, uint32_t rd) {
    return 0xf2800000 | (imm16 << 5) | (hw << 21) | rd;
}

void assemble_absolute_load(uint32_t rd, uintptr_t addr, uint32_t *arr) {
    arr[0] = cpu_to_le32(assemble_movk(addr & 0xffff, 0b0, rd));
    arr[1] = cpu_to_le32(assemble_movk((addr & 0xffff0000) >> 16, 0b1, rd));
    arr[2] = cpu_to_le32(assemble_movk((addr & 0xffff00000000) >> 32, 0b10, rd));
    arr[3] = cpu_to_le32(assemble_movk((addr & 0xffff000000000000) >> 48, 0b11, rd));
}



10111101101111110010

// movz encoding:
// 0 | 1 0 1 0 0 1 0 1 | 0 0 | 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 | 0 0 0 0 0
//------------------------------------------------------------------------
// sf|opc              |hw   |imm16                            |rd

uint32_t assemble_movz(uint32_t imm16, uint32_t hw, uint32_t rd) {
    return 0xa5000000 | (imm16 << 5) | (hw << 21) | rd;
}



uint32_t assemble_movk(uint32_t imm16, uint32_t hw, uint32_t rd) {
    return 0xf2800000 | (imm16 << 5) | (hw << 21) | rd;
}

uint32_t assemble_movz(uint32_t imm16, uint32_t hw, uint32_t rd) {
    return 0xa5000000 | (imm16 << 5) | (hw << 21) | rd;
}

unsigned char *assemble_absolute_load(uint32_t rd, uintptr_t addr) {
    unsigned char *code = vmalloc(12); // 3 insts needed, insts 4 bytes
    code[0] = assemble_movz(addr & 0xffffffff, 0b1, rd);
    code[4] = assemble_movk(addr & 0xffff00000000, 0b10, rd);
    code[8] = assemble_movk(addr & 0xffff000000000000, 0b11, rd);
    return code;
}


"\x80\xf9\xb3\xd2\x00\x0b\xdb\xf2\xe0\xff\xff\xf2"
